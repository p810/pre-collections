<?php

macro ·recursion {
    ·chain(
        ·token("{"),
        ·angle_layer()·values,
        ·token("}"),
        ·token("="),
        ·_()·keys
    )
} >> function($ast) {
    $keys = new \Yay\Ast("·keys");

    foreach ($ast->{"·values"} as $token) {
        if (!$token->is(T_VARIABLE)) {
            continue;
        }

        $keys->push(new \Yay\Ast("·var", $token));
    }

    $ast->append($keys);
} >> {··trim(
    [··trim(·keys ···(, ) {··trim( ··stringify(··unvar(·var)) => ·var )})] =
)}

macro ·recursion {
    ·chain(
        ·either(
            return,
            ·token("["),
            ·token("("),
            ·token(","),
            ·token("="),
            ·operator("=>")
        )·before,
        ·token("{"),
        ·optional(·angle_layer())·values,
        ·token("}"),
        ·_()·is_array,
        ·_()·is_not_array
    )
} >> function($ast) {
    $found = false;

    foreach ($ast->{"·values"} as $token) {
        if ($token->is(T_DOUBLE_ARROW)) {
            $found = true;
        }
    }

    $append = null;

    if ($found) {
        $append = new \Yay\Ast("·is_array");
        $append->push(new \Yay\Ast());
    } else {
        $append = new \Yay\Ast("·is_not_array");
        $append->push(new \Yay\Ast());
    }

    $ast->append($append);
} >> {··trim(
    ·is_array ?·{
        ·before (new \Pre\Collections\Collection([·values]))
    }

    ·is_not_array ?·{
        ·before (new \Pre\Collections\Collection(·values))
    }
)}
