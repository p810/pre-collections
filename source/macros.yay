<?php

$(macro :recursion) {
    $(chain(
        token("{"),
        layer() as values,
        token("}"),
        token("="),
        _() as keys
    ))
} >> function($ast) {
    $keys = new \Yay\Ast("keys");

    foreach ($ast->{"values"} as $token) {
        if (!$token->is(T_VARIABLE)) {
            continue;
        }

        $keys->push(new \Yay\Ast("var", $token));
    }

    $ast->append($keys);
} >> {$$(trim(
    [$$(trim(
        $(keys ... (, ) {$$(trim($$(stringify($$(unvar($(var))))) => $(var)))})
    ))] =
))}

$(macro :recursion) {
    $(chain(
        either(
            return,
            token("["),
            token("("),
            token(","),
            token("="),
            token("?"),
            buffer("??"),
            buffer("&&"),
            buffer("||"),
            chain(
                either(
                    token(T_CONSTANT_ENCAPSED_STRING),
                    token(T_LNUMBER),
                    token(T_DNUMBER),
                    token(T_STRING),
                    token(T_VARIABLE)
                ),
                buffer("=>")
            )
        ) as before,
        token("{"),
        optional(layer() as values),
        token("}"),
        _() as isArray,
        _() as isNotArray
    ))
} >> function($ast) {
    $found = false;

    foreach ($ast->{"values"} as $token) {
        if ($token->is(T_DOUBLE_ARROW)) {
            $found = true;
        }
    }

    $append = null;

    if ($found) {
        $append = new \Yay\Ast("isArray");
        $append->push(new \Yay\Ast());
    } else {
        $append = new \Yay\Ast("isNotArray");
        $append->push(new \Yay\Ast());
    }

    $ast->append($append);
} >> {$$(trim(
    $(isArray ? {
        $(before) (new \Pre\Collections\Collection([$(values)]))
    })

    $(isNotArray ? {
        $(before) (new \Pre\Collections\Collection($(values)))
    })
))}
